#!/usr/bin/python2

import re
import sys
import argparse
import string

def main(formatter, commands, raw, contexts, dump, variables, regex):
    code = 0; ctxd = {}; ctxl = []
    for line in sys.stdin.readlines():
        for context in contexts:
            named, other, matched = group(context, line)
            ctxd.update(named)
            ctxl = ctxl[len(other):] + other
        named, other, matched = group(regex, line)
        if named or other or matched:
            if dump and not raw:
                data = {'named': named, 'other': other, 'matched': matched,
                       'variables': variables, 'context': [ctxl, ctxd]}
                if 'all' in dump:
                    print data 
                else:
                    print dict([(k,v) for k, v 
                                 in data.items()
                                 if k in dump
                        ])
            elif commands and not dump: # Handles commands and or raw
                import os
                for ctrl, command in commands:
                    cmdstr = substitute(command, named, other, ctxd, ctxl, 
                        variables)
                    code = os.system(cmdstr)
                    #assert code == 0, 'command failed: "%s"'%cmdstr
                    if code != 0: 
                        sys.stderr.write('command failed: "%s"'%cmdstr)
                    if ctrl == 't':   # Tee command string to stdout
                        print cmdstr
                    elif ctrl == 'r': # Write raw matched line to stdout
                        print matched
            elif formatter and not raw:
                print substitute(formatter, named, other, ctxd, ctxl, variables)
            elif raw:
                print matched
    return code

def group(regex, line):
    try:
        match = re.compile(regex).match(line)
    except:
        assert False, 'syntax error:"%s"\n'%regex
    if match:
        named = match.groupdict()
        other = list(match.groups())[len(named):]
        matched = match.group()
    else:
        named, other, matched = {}, [], ""
    return named, other, matched

def substitute(line, named, other, ctxd, ctxl, variables):
    line = substitute_positional(line, ctxl)
    line = substitute_positional(line, other)
    line = substitute_named(line, variables)
    line = substitute_named(line, ctxd)
    line = substitute_named(line, named)
    return line

def substitute_positional(line, subs): 
    for i, sub in zip(range(1,len(subs)+1), subs):
        line = line.replace(r'\%s'%i, sub)
    return line

def substitute_named(line, subs):
    return string.Template(line).safe_substitute(**subs)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "-print", dest='formatter', metavar='FORMATTER',
            help="Output FORMATTER with groups as bash vars")
    parser.add_argument("-c", "-context", action='append', dest='contexts',
            help='Sets the context (may specify multiple)', default=[])
    parser.add_argument("-s", "-set", dest='variables',
            help='VARIABLES is bash style variable string')
    parser.add_argument("-dump", action='append', metavar='DATA', dest='dump', 
            help="Dumps all match items including context, as a python "
                 "dictionary, overriding all printing directive "
                 "(other than -r) and all command directives (other than -b)"
                 "The options are named, matched, context, variables, other, all")
    parser.add_argument("-e", "-exec", action='append', metavar='COMMAND',
            dest='commands', default=[],
            help="Build a COMMAND to be executed (may specify multiple)")
    parser.add_argument("-t", "-tee", action='append', metavar='COMMAND',
            dest='tees', default=[],
            help="Acts on COMMAND like -e but prints as well")
    parser.add_argument("-r", "-raw", action='store_true', dest='raw',
            help="Overrides all printing options by writing the raw matched "
                 "lines to standard output.  In the case of -e or -t, COMMAND "
                 "is still executed as long as -d or -b is not specified")
    parser.add_argument("-b", "-bypass", action='store_true', dest='bypass',
            help="Overrides all directives and simply writes every line from "
                 "standard input directly to standard output")
    parser.add_argument("regex")
    namespace = parser.parse_args()
    if namespace.bypass: # Must be first thing done to bypass everything
        for line in sys.stdin.readlines():
            print line[:-1]
        sys.exit(0)
    regex = namespace.regex
    commands = [('',command) for command in namespace.commands]
    commands += [('t',command) for command in namespace.tees]
    if namespace.raw:
        commands = [('r',command) for _, command in commands]
    if regex.strip() == '*': 
        regex = '.*'
    if namespace.variables:
        variables = dict([tuple(v.split('=')) 
            for v in namespace.variables.split(':')])
    else:
        variables = {}
    try:
        code = main(namespace.formatter, commands, namespace.raw, 
                namespace.contexts, namespace.dump, variables, regex)
        sys.exit(code)
    except AssertionError, e:
        sys.stderr.write(e.message)
        sys.exit(1)
